/*
 * This source file was generated by the Gradle 'init' task
 */
package bond.memo.mmorpg;

import bond.memo.mmorpg.config.AppConfig;
import bond.memo.mmorpg.handler.HttpServerHandler;
import bond.memo.mmorpg.module.AutoServiceModule;
import bond.memo.mmorpg.module.GameModule;
import bond.memo.mmorpg.service.AOISystem;
import bond.memo.mmorpg.visualizer.AOIVisualizer;
import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelOption;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
import io.netty.handler.stream.ChunkedWriteHandler;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class GameServer {

    private final int port;
    private final AOISystem aoiSystem;

    @Inject
    public GameServer(int port, AOISystem aoiSystem) {
        this.port = port;
        this.aoiSystem = aoiSystem;
    }

    public void start() throws InterruptedException {
        try (EventLoopGroup bossGroup = new NioEventLoopGroup();
             EventLoopGroup workerGroup = new NioEventLoopGroup()) {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(serverInitializer())
                    .option(ChannelOption.ALLOCATOR, ByteBufAllocator.DEFAULT)
                    .option(ChannelOption.SO_BACKLOG, 128)
                    .childOption(ChannelOption.SO_KEEPALIVE, true)
                    .childOption(ChannelOption.ALLOCATOR, ByteBufAllocator.DEFAULT);
            ChannelFuture f = b.bind(port).sync();
            f.channel().closeFuture().sync();
        }
        log.info("Server started on port {}", port);
    }

    private ChannelInitializer<SocketChannel> serverInitializer() {

        return new ChannelInitializer<>() {
            @Override
            protected void initChannel(SocketChannel ch) {
                ChannelPipeline pipeline = ch.pipeline();
                // Setup Websocket
                pipeline.addLast(new HttpServerCodec());
                pipeline.addLast(HttpServerHandler.from(aoiSystem));
                pipeline.addLast(new HttpObjectAggregator(65536));
                pipeline.addLast(new ChunkedWriteHandler());
                pipeline.addLast(new WebSocketServerProtocolHandler("/ws"));
            }
        };
    }

    public static void main(String[] args) {
        String profile = "dev"; // default profile
        if(args.length > 0) {
            profile = args[0];
        }
        try {
            Injector injector = Guice.createInjector(AutoServiceModule.of(), GameModule.from(profile));
            AppConfig config = injector.getInstance(AppConfig.class);
            log.info("Server port {}", config.serverPort());
            if(config.showUI())
                injector.getInstance(AOIVisualizer.class).startGui();
            injector.getInstance(GameServer.class).start();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            log.error(e.getMessage(), e);
        }
    }
}
