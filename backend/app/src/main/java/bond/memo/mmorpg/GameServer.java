/*
 * This source file was generated by the Gradle 'init' task
 */
package bond.memo.mmorpg;

import bond.memo.mmorpg.aoi.AOISystemImpl;
import bond.memo.mmorpg.model.Player;
import bond.memo.mmorpg.visualizer.AOIVisualizer;
import io.netty.bootstrap.ServerBootstrap;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelOption;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import lombok.extern.slf4j.Slf4j;

import java.awt.Color;

import static bond.memo.mmorpg.constants.Constants.RADIUS;
import static bond.memo.mmorpg.constants.Constants.SERVER_PORT;

@Slf4j
public class GameServer {
    private final int port;

    public GameServer(int port) {
        this.port = port;
    }

    public void start() throws InterruptedException {
        EventLoopGroup bossGroup = new NioEventLoopGroup();
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            ServerBootstrap b = new ServerBootstrap();
            b.group(bossGroup, workerGroup)
                    .channel(NioServerSocketChannel.class)
                    .childHandler(new ServerInitializer())
                    .option(ChannelOption.ALLOCATOR, ByteBufAllocator.DEFAULT)
                    .option(ChannelOption.SO_BACKLOG, 128)
                    .childOption(ChannelOption.SO_KEEPALIVE, true)
                    .childOption(ChannelOption.ALLOCATOR, ByteBufAllocator.DEFAULT);
            ;

            ChannelFuture f = b.bind(port).sync();
            f.channel().closeFuture().sync();
        } finally {
            workerGroup.shutdownGracefully();
            bossGroup.shutdownGracefully();
        }
    }

    public static void main(String[] args) {
        AOISystemImpl aoiSystem = new AOISystemImpl(1000, 100);

        Player mainPlayer = Player.builder()
                .id(300).name("Lucas").position(Player.Position.of(200, 300))
                .speed(200).radius(RADIUS).direction(200)
                .color(Color.RED)
                .build();
        aoiSystem.addPlayer(mainPlayer);
        AOIVisualizer.from(aoiSystem, mainPlayer).startGui();

        log.info("Server started on port {}", SERVER_PORT);
        try {
            new GameServer(SERVER_PORT).start();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
}
